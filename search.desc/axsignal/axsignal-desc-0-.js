searchState.loadedDescShard("axsignal", 0, "信号处理模块\n处理所有信号的结构\n接受信号的结构，每一个进程都有一个\nTo define the signal action and its flags\n清空信号处理模块\n清空信号处理模块\n查询是否有未决信号，若有则返回对应编号\nReturns the argument unchanged.\nReturns the argument unchanged.\nTo get the action of a signal with the signal number\n查询当前是否有未决信号\nhandlers<code>[i]</code> stands for the handler of signal <code>i+1</code>\n…\n附加信息\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n信号掩码\n新建一个信号处理函数\n新建处理模块\n未决信号集\n设置信号处理函数\nDefine signal numbers.\n尝试添加一个bit作为信号\nSignal ucontext types and operations.\n恢复进程执行\n…\n忽略信号\ndo not receive notification when child processes stop\ndo not create zombie on child process exit\ndo not automatically block the signal when its handler is …\ncall the signal handler on an alternate signal stack …\nrestore the signal action to the default upon entry to the …\nrestart system calls if possible\nuse the restorer field as the signal trampoline\nuse signal handler with 3 arguments, and sa_sigaction …\n特殊取值，代表默认处理函数\n特殊取值，代表忽略这个信号\nThe structure of the signal action\nThe flags of the signal action\n没有显式指定处理函数时的默认行为\n暂停进程执行\n终止进程\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet the default action of a signal\nget the restorer address of the signal action\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nWhether the syscall should be restarted after the signal …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\n…\n信号处理的flags\n信号处理函数的地址\n该信号处理函数的信号掩码\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe information of the signal\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPadding\nThe process ID of the sender\nThe code of the signal\nAn errno value\nThe signal number\nThe value sent with the signal\nThe value pointer of the signal\nThe real user ID of the sender\nThe maximum number of signals.\n信号编号。\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>mcontext</code> struct for the signal action\nThe alternate signal stack has been marked to be …\nThe alternate signal stack is disabled.\nThe thread is currently executing on the alternate signal …\n处理信号时使用的栈\nThe user context saved for the signal action, which can be …\nFlags for the stack\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nget the pc from the user context\ninit the user context by the pc and the mask\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSize of the stack\nBase address of the stack")