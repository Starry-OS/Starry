searchState.loadedDescShard("linux_syscall_api", 0, "This crate provides a safe interface to the Linux syscall …\n…\n在 exec 时需关闭\n如文件不存在，可创建它\n是否是目录\n对这个文件的输出需符合 IO …\nArgument list too long\nPermission denied\nAddress already in use\nCannot assign requested address\nAdvertise error\nAddress family not supported by protocol\nTry again\nOperation already in progress\nInvalid exchange\nBad file number\nFile descriptor in bad state\nNot a data message\nInvalid request descriptor\nInvalid request code\nInvalid slot\nBad font file format\nDevice or resource busy\nOperation Canceled\nNo child processes\nChannel number out of range\nCommunication error on send\nSoftware caused connection abort\nConnection refused\nConnection reset by peer\nResource deadlock would occur\nDestination address required\nMath argument out of domain of func\nRFS specific error\nQuota exceeded\nFile exists\nBad address\nFile too large\nHost is down\nNo route to host\nMemory page has hardware error\nIdentifier removed\nIllegal byte sequence\nOperation now in progress\nInterrupted system call\nInvalid argument\nI/O error\nTransport endpoint is already connected\nIs a directory\nIs a named type file\nKey has expired\nKey was rejected by service\nKey has been revoked\nLevel 2 halted\nLevel 2 not synchronized\nLevel 3 halted\nLevel 3 reset\nCan not access a needed shared library\nAccessing a corrupted shared library\nCannot exec a shared library directly\nAttempting to link in too many shared libraries\n.lib section in a.out corrupted\nLink number out of range\nToo many symbolic links encountered\nWrong medium type\nToo many open files\nToo many links\nMessage too long\nMultihop attempted\nFile name too long\nNo XENIX semaphores available\nNetwork is down\nNetwork dropped connection because of reset\nNetwork is unreachable\nFile table overflow\nNo anode\nNo buffer space available\nNo CSI structure available\nNo data available\nNo such device\nNo such file or directory\nExec format error\nRequired key not available\nNo record locks available\nLink has been severed\nNo medium found\nOut of memory\nNo message of desired type\nMachine is not on the network\nPackage not installed\nProtocol not available\nNo space left on device\nOut of streams resources\nDevice not a stream\nInvalid system call number\nBlock device required\nTransport endpoint is not connected\nNot a directory\nDirectory not empty\nNot a XENIX named type file\nState not recoverable\nSocket operation on non-socket\nNot a typewriter\nName not unique on network\nNo such device or address\nOperation not supported on transport endpoint\nValue too large for defined data type\nOwner died\nOperation not permitted\nProtocol family not supported\nBroken pipe\nProtocol error\nProtocol not supported\nProtocol wrong type for socket\nMath result not representable\nRemote address changed\nObject is remote\nRemote I/O error\nInterrupted system call should be restarted\nOperation not possible due to RF-kill\nRead-only file system\nCannot send after transport endpoint shutdown\nSocket type not supported\nIllegal seek\nNo such process\nSrmount error\nStale file handle\nStreams pipe error\nTimer expired\nConnection timed out\nToo many references: cannot splice\nText file busy\nStructure needs cleaning\nProtocol driver not attached\nToo many users\n确认一定是创建文件。如文件已存在，返回 …\nCross-device link\nExchange full\nContains the error value\nAn object providing access to an open file on the …\nFlags for opening a file\nA struct to represent a file path, which will be …\n…\n…\n非阻塞读写?(虽然不知道为什么但 date.lua …\nContains the success value\n指定文件打开时的权限\n只读\n读写\nThe error of a syscall, which is a <code>LinuxError</code>\nThe result of a syscall\n要求把 CR-LF 都换成 LF\n…\n只能写入\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\n获取创建权限\nOpens a file in write-only mode.\n创建一个链接\nCreates a new file in read-write mode; error if the file …\nThe intersection of a source flags value with the …\n获取所属目录\nGet a flags value with all bits unset.\n判断是否end_with\n判断是否相同\nWhether the file is executable.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\n获取文件/目录名\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet the file attributes.\n在完成一次系统调用之后，恢复全局目录\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\n获取是否需要在 <code>exec()</code> 时关闭\n获取是否是目录\n返回是否是目录\nWhether all bits in this flags value are unset.\n返回是否是文件\n返回是否是根目录\nYield a set of contained flags values.\nYield a set of contained named flags values.\nQueries metadata about the underlying file.\n创建一个 FilePath, 传入的 path 会被 canonicalize, …\n获取创建新文件权限 …\n若使用多次new …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAttempts to open a file in read-only mode.\nReturns a new OpenOptions object.\n获取路径\nTo read a file with the given path\n获得文件的读/写权限\n获取读权限\n释放所有非内核进程\nThe intersection of a source flags value with the …\nTo run a testcase with the given name and environment …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nTruncates or extends the underlying file, updating the …\n判断是否start_with\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nDefine the trap handler for the whole kernel\nTo truncate the file to a specified length.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\n获取写权限\nThe memory is device memory.\nThe memory is executable.\nGeneric page table entry flags that indicate the …\nThe memory is readable.\nThe memory is uncached.\nThe memory is user accessible.\nA virtual memory address.\nThe memory is writable.\nAligns the address downwards to the given alignment.\nAligns the address downwards to 4096 (bytes).\nReturns the offset of the address within the given …\nReturns the offset of the address within a 4K-sized page.\nAligns the address upwards to the given alignment.\nAligns the address upwards to 4096 (bytes).\nGet a flags value with all known bits set.\nConverts the virtual address to a mutable raw pointer.\nConverts the virtual address to a raw pointer.\nConverts the address to an <code>usize</code>.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConverts an <code>usize</code> to a virtual address.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nHandle the interrupt\nHandle the page fault exception\nTo handle the pending signals for current process\nHandle the syscall\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the address has the demanded alignment.\nChecks whether the address is 4K-aligned.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nRecord the occurrence of a syscall\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.")