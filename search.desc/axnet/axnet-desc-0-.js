searchState.loadedDescShard("axnet", 0, "ArceOS network module.\nThe broadcast address.\nA relative amount of time.\nThe prefix used in IPv4-mapped addresses.\nAn internetworking address.\nAn IPv4 address.\nA four-octet IPv4 address.\nAn IPv6 address.\nA sixteen-octet IPv6 address.\nThe link-local all nodes multicast address.\nThe link-local all routers multicast address.\nThe link-local all RPL nodes multicast address.\nThe loopback address.\nThe longest possible duration we can encode.\nAll multicast-capable routers\nAll multicast-capable nodes\nAn internet endpoint address.\nA TCP socket that provides POSIX-like APIs.\nAn unspecified address.\nThe unspecified address.\nA UDP socket that provides POSIX-like APIs.\nAccepts a new connection.\nAdd multicast_addr to the loopback device.\nReturn an address as a sequence of octets, in big-endian.\nReturn an IPv4 address as a sequence of octets, in …\nReturn an IPv6 address as a sequence of octets, in …\nConvert an IPv4 mapped IPv6 address to an IPv4 address.\nBenchmark raw socket receive bandwidth.\nBenchmark raw socket transmit bandwidth.\nBinds an unbound socket to the given address and port.\nBinds an unbound socket to the given address and port.\nClose the transmit half of the tcp socket. It will call …\nTo get the address pair of the socket.\nConnects this UDP socket to a remote address, allowing the …\nPublic function for DNS query.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct an IPv4 address from a sequence of octets, in …\nConstruct an IPv6 address from a sequence of octets, in …\nConvert from <code>std::net::SocketAddr</code> to …\nCreate a new <code>Duration</code> from a number of microseconds.\nCreate a new <code>Duration</code> from a number of milliseconds.\nConstruct an IPv6 address from a sequence of words, in …\nCreate a new <code>Instant</code> from a number of seconds.\nParse a string representation of an IP address.\nParse a string representation of an IPv4 address.\nParse a string representation of an IPv6 address.\nInitializes the network subsystem by NIC devices.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to an <code>IpAddress</code>.\nConvert to an <code>IpAddress</code>.\nConvert from <code>smoltcp::wire::IpEndpoint</code> to …\nQuery whether the address is the broadcast address.\nQuery whether the address is the broadcast address.\nWhether the socket is closed.\nWhether the socket is connected.\nQuery whether the IPv6 address is a global unicast address.\nQuery whether the IPv6 address is an IPv4 mapped IPv6 …\nQuery whether the address falls into the “link-local” …\nQuery whether the IPv6 address is in the link-local scope.\nQuery whether the address falls into the “loopback” …\nQuery whether the IPv6 address is the loopback address.\nQuery whether the address is a valid multicast address.\nQuery whether the address is a multicast address.\nQuery whether the IPv6 address is a multicast address.\nReturns whether this socket is in nonblocking mode.\nReturns whether this socket is in nonblocking mode.\nReturns whether this socket is in reuse address mode.\nReturns whether this socket is in reuse address mode.\nQuery whether the address is a valid unicast address.\nQuery whether the address is an unicast address.\nQuery whether the IPv6 address is an unicast address.\nQuery whether the IPv6 address is a Unique Local Address …\nQuery whether the address falls into the “unspecified” …\nQuery whether the address falls into the “unspecified” …\nQuery whether the IPv6 address is the unspecified address.\nStarts listening on the bound address and port.\nReturns the local address and port, or <code>Err(NotConnected)</code> …\nReturns the local address and port, or <code>Err(NotConnected)</code> …\nThe fractional number of milliseconds in this <code>Duration</code>.\nThe fractional number of milliseconds in this <code>Duration</code>.\nTo get the nagle algorithm enabled or not.\nCreates a new TCP socket.\nCreates a new UDP socket.\nCreate an endpoint address from given address and port.\nConstruct an IPv4 address from parts.\nConstruct an IPv6 address from parts.\nReceives a single datagram message on the socket, without …\nReturns the remote address and port, or <code>Err(NotConnected)</code> …\nReturns the remote address and port, or <code>Err(NotConnected)</code> …\nWhether the socket is readable or writable.\nWhether the socket is readable or writable.\nPoll the network stack.\nIf <code>self</code> is a CIDR-compatible subnet mask, return …\nReceives data from the socket, stores it in the given …\nReceives a single datagram message on the socket from the …\nReceives a single datagram message on the socket. On …\nReceives data from the socket, stores it in the given …\nReceives data from the socket, stores it in the given …\nThe number of whole seconds in this <code>Duration</code>.\nTransmits data in the given buffer.\nSends data on the socket to the remote address to which it …\nSends data on the socket to the given address. On success, …\nTo set the nagle algorithm enabled or not.\nMoves this TCP stream into or out of nonblocking mode.\nMoves this UDP socket into or out of nonblocking mode.\nMoves this TCP socket into or out of reuse address mode.\nMoves this UDP socket into or out of reuse address mode.\nSet the TTL (time-to-live) option for this socket.\nClose the connection.\nClose the socket.\nThe solicited node for the given unicast address.\nThe total number of microseconds in this <code>Duration</code>.\nThe total number of milliseconds in this <code>Duration</code>.\nCreate an address wrapping an IPv4 address with the given …\nCreate an address wrapping an IPv6 address with the given …\nReturn the protocol version.\nTo get the socket and call the given function.\nTo get the socket and call the given function.\nTo get the mutable socket and call the given function.\nWrite a IPv6 address to the given slice.")