searchState.loadedDescShard("axprocess", 0, "This module provides the process management API for the …\nMap from process id to arc pointer of process\nThe process control block\nMap from task id to arc pointer of task\n为进程分配一个文件描述符\n是否被vfork阻塞\n子进程\n实现简易的clone系统调用 …\nreturn the <code>Arc&lt;Process&gt;</code> of the current process\ncurrent running task\n将当前进程替换为指定的用户程序 …\n退出状态码\n退出当前任务\n文件描述符管理器\n该进程可执行文件所在的路径\nclone 任务时指定的参数。\nReturns the argument unchanged.\n实现与futex相关的系统调用\n若进程运行完成，则获取其返回码 …\n获取当前进程的工作目录\nget the exit code of the process\nget the executable file path of the process\nget the heap bottom of the process\nget the heap top of the process\nget the parent process id\nget stack size\nGet the task reference by tid\nget the process is blocked by vfork or not\nwhether the process is a zombie process\nTo deal with the page fault\nJudge whether the signal request the interrupted syscall …\n查询当前任务是否存在未决信号\n…\n…\n…\n初始化内核调度进程\nCalls <code>U::from(self)</code>.\n进程状态\n模拟的链接、挂载模块 …\n返回应用程序入口，用户栈底，用户堆底\nalloc physical memory for lazy allocation manually\nalloc range physical memory for lazy allocation manually\nalloc physical memory with the given type size for lazy …\n地址空间\n创建一个新的进程\n父进程号\nget the process id\nrobust list存储模块 …\n设置当前任务的clear_child_tid\nSet the current working directory of the process\nset the exit code of the process\nset the executable file path of the process\nset the heap bottom of the process\nset the heap top of the process\nset the parent process id\nTODO: …\nset the process as blocked by vfork\nset the process as a zombie process\n负责处理进程中与信号相关的内容\n信号处理模块 …\n以进程作为中转调用task的sleep\n栈大小\n所管理的线程\n…\n…\n统计时间输出 …\n…\n以进程作为中转调用task的yield\n…\n要求在子任务的一个地址写入子任务的 tid\n历史遗留的 flag，现在按 linux 要求应忽略\n共享文件描述符(fd)表\n共享文件系统新信息\n子任务使用新的命名空间。目前还未用到\nNew pid namespace.\n.\n指定子任务的 ppid 为当前任务的 …\n要求在父任务的一个地址写入子任务的 tid\n创建指向子任务的fd，用于 sys_pidfd_open\n用于 sys_ptrace\n要求设置 tls\n共享信号处理函数\n子任务共享同一组信号量。用于 sys_semop\n作为一个“线程”被创建。具体来说，它同 …\n与 sys_ptrace 相关，目前未用到\n…\n共享地址空间\n用于 sys_clone 的选项\n子任务正常退出\n找不到对应的子任务\n子任务正在运行\nsys_wait4 的返回值\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nwaiting queue which stores tasks waiting for futex variable\nReturns the argument unchanged.\nRequeue tasks waiting on a futex variable\nWait on a futex variable\nWake up tasks waiting on a futex variable\nWake up tasks specified by a bitset waiting on a futex …\nThe location of the head of the robust list in user space\nCalls <code>U::from(self)</code>.\nThe length of the robust list\nCreate a new robust list\nThe file descriptor used to specify the current working …\nA struct to represent a file path, which will be …\n实际文件(而不是用户文件)到链接数的映射\n创建一个链接\nTo deal with the path and return the canonicalized path\n获取所属目录\n判断是否end_with\n判断是否相同\n获取文件/目录名\nReturns the argument unchanged.\n获取文件的链接数\nSafety\nCalls <code>U::from(self)</code>.\n返回是否是目录\n返回是否是文件\n返回是否是根目录\n创建一个 FilePath, 传入的 path 会被 canonicalize, …\n获取路径\nSafety\n将用户提供的路径转换成实际的路径\n删除一个链接\n判断是否start_with\n信号处理模块，进程间不共享\nAlternative signal stack\nWhether the current process has signals pending\nReturns the argument unchanged.\nGet the exit signal\n处理当前进程的信号\nJudge whether the signal request the interrupted syscall …\n初始化信号模块\nCalls <code>U::from(self)</code>.\n保存的trap上下文\n将保存的trap上下文填入内核栈中\n发送信号到指定的进程\n发送信号到指定的线程\nSet the exit signal\n是否存在siginfo\n信号处理函数集\n从信号处理函数返回\n未决信号集")